"""
Django settings for meiduo_mail project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os.path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(BASE_DIR)
print((Path(__file__).resolve().parent.parent.parent))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-si05!on==jag)1o0)tsca6n)hxrp#ev=fjv1&)b=nrbp@fclk-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['www.meiduo.site', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 会在默认的BASE_DIR下寻找（当前目录，不会去目录里面查找）----->去apps下面寻找
    'apps.users',
    'apps.verifications',
    # 第二种导入方法----book.apps.BookConfig------>改配置文件users下的apps---->不推荐使用
    # 跨域 注册django-cors-headers/ CORS
    'corsheaders',
    'apps.oauth',
    'apps.areas',
    'apps.goods',
    'apps.contents',
    # 数据查询haystack
    'haystack',
    # 定时任务django_crontab
    'django_crontab',



]

MIDDLEWARE = [
    # CORS配置放在最上面
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 下面的源文件中的文件和包
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meiduo_mail.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 配置模版路径
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo_mail.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 引擎
        'NAME': 'meiduo_mail',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'root',  # 测试服务器--->不可能由root操作--->删库操作--->只允许操作指定的数据库
        'PASSWORD': 'kingshen2'

    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 配置django-redis---------------------------------------------------------⬇
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }
CACHES = {
    'default': {  # 0号库存默认数据 (预留）------->保存省/市/区数据
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/0',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        }
    },
    'session': {  # 1号库存session数据
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        }
    },
    'code': {  # 2号库存图形验证码数据 和 短信验证码
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/2',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        }
    },
    'history': {  # 用于保存历史记录
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/3',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        }
    },
}
# 将session的引擎设置为cache
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# 将session保存到redis中
# SESSION_CACHE_ALIAS = 'default'
SESSION_CACHE_ALIAS = 'session'
# -----------------------------------------------------------------------------⬆


# 配置工程日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/meiduo.log'),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,  # 备份
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器------>在urls中使用
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志接收的最低级别日志
        },
    }

}

"""
通过提供一个值给AUTH_USER_MODEL设置，指向自定义的模型，Django允许你覆盖默认的User模型
这个点式路径包含Django应用的名称（必须位于你的INSTALLED_APPS中），和你要用作User模型的Django模型的名称
"""
AUTH_USER_MODEL = 'users.User'

# 添加CORS白名单-------------------------------------------⬇
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://localhost:8080',
    'http://www.meiduo.site:8080',  # 再写错端口前面的冒号就自己打脸把
    'http://www.meiduo.site.8000',
    'http://127.0.0.1:8000'
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie
# ---------------------------------------------------------⬆
# ----------------------------------------------->下面为QQ第三方登录时候的配置信息
# QQ登录参数
# 申请的客户端id：
QQ_CLIENT_ID = '101474184'
# 申请的客户端密钥：
QQ_CLIENT_SECRET = 'c6ce949e04e12ecc909ae6a8b09b637c'
# 申请时添加的，登录成功后回调的路径
QQ_REDIRECT_URL = 'http://www.meiduo.site:8080/oauth_callback.html'

# -------------------------------QQ邮件发送相关---------------------------
# 1.django的那个类发送邮件
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 2.邮箱服务器
EMAIL_HOST = 'smtp.qq.com'
# 3.邮箱端口
EMAIL_PORT = 25
# 4.邮箱使用者
EMAIL_HOST_USER = '1747709835@qq.com'
# 5.下面的密码为授权码
EMAIL_HOST_PASSWORD = 'tkvskmcpteqreceg'
# 收件人看到的发件人
EMAIL_FROM = '美多商城<王爽 1747709835@qq.com>'

# ------------默认文件存储类------------加载自定义文件存储类-----------------
# 此处声明后，可以直接调用类中的方法进行，使用
DEFAULT_FILE_STORAGE = 'utils.fastdfs.storage.MyStorage'


# --------------对接haystack--------------elasticsearch的配置
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://192.168.1.6:9200/',      # elasticsearch服务器运行的ip地址 排除服务器问题
        'INDEX_NAME': 'haystack',           # 指定elasticsearch建立的索引库的名称
    },
}
# 当添加，修改，删除数据的时候，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 设置搜索美每页的记录条数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5

# ################################ 定时任务  #######################
# 元素的 第一个参数为 周期     元素的 第二个参数为定时任务
# M：分钟（0-59）    每分钟用 * 或者 */1 表示
# H：小时（0-23）    0表示0点
# D：天（1-31）
# m：月（1-12）
# d：一星期内的天（0-6）     0为星期日
# 分 时 日 月 周
# '>>' + os.path.join(BASE_DIR, 'logs/crontab.log'      为生成日志
CRONJOBS = [
    # 1分钟执行一次  注意该处添加定时任务的时候，不需要添加 函数中的()
    ('*/1 * * * *','apps.contents.crons.generic_meiduo_index', '>>' + os.path.join(BASE_DIR, 'logs/crontab.log'))
]
# 解决crontab中文问题，如果出现非英文字符会出现字符异常错误
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'


















